<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Class - Model
 *      エンティティファクトリークラス
 *---------------------------------------------------------------------------*/
namespace PR;

class EntityFactory{

	private static $aContainers__ = array();
	private static $aEntities__ = array();

	public static function createContainer($rsName=null){
		if(!array_key_exists($rsName,$this->aContainers)){
			$cntr = $this->newContainer($rsName);
			$entity = $this->newEntity($rsName);
			self::$aContainers__[$rsName] = $cntr;
			self::$aEntities__[$rsName] = $entity;
		}
		$obj = clone self::$aContainers__[$rsName];
		return $obj;
	}

	public static function createEntity($rsName=null){
		if(!array_key_exists($rsName,$this->aEntities)){
			$cntr = $this->newContainer($rsName);
			$entity = $this->newEntity($rsName);
			self::$aContainers__[$rsName] = $cntr;
			self::$aEntities__[$rsName] = $entity;
		}
		$obj = clone self::$aEntities__[$rsName];
		return $obj;
	}

	public static function newContainer($rsName){
		$cntr = new Container($rsName);

		foreach(){
			array
		}

		$cntr->setParameters($table,$pkeys,$inskey,$myname);
		$cntr->setNameTags($tags);
		return $cntr;
	}

		$aPrimaryKeys = array('iSysId','iUserId');
		$aInsKey = array('colSysId'=>\PR\Model::INS_SERIAL);
		$sMyName = get_class($this);
		$this->setParameters('Sample_Table',$aPrimaryKeys,$aInsKey,$sMyName);

		$this->aNameTags = array();
		$this->aNameTags['iSysId'] = new \PR\NameTag('iSysId','post_SysId','colSysId','システムID',\PR\Model::DT_NUMERIC);
		$this->aNameTags['sUserId'] = new \PR\NameTag('sUserId','post_UserId','colUserId','ユーザーID',\PR\Model::DT_ALPHANUMERIC);
		$this->aNameTags['fFloat'] = new \PR\NameTag('fFloat','post_Float','colFloat','小数',\PR\Model::DT_FLOAT);
		$this->aNameTags['sText'] = new \PR\NameTag('sText','post_Text','s_colText','テキスト',\PR\Model::DT_TEXT);
		$this->aNameTags['sTel'] = new \PR\NameTag('sTel','post_Tel','s_colTel','電話番号',\PR\Model::DT_TEL);
	}


		$sName = $rsName;
		$callback = function($str){
		    return $this->hello . ', ' . $str;
		};
	}

	private function _readFile(){
		$path = SysEnv::getYourEntityFilePath();
		$filer = new Filer($path);
		$rc = $filer->openFile();
		if($rc != 0){
			throw new Exception($rc,SMSG('PR_E017','openFile',$path));
		}

		$cmtPhase = false;
		$clsPhase = false;
		$insPhase = false;
		$bean = null;
		$lineNum = 0;
		foreach($line = $filer->getLine() !== null){
			$lineNum++;
			if(!$filer->checkLine($line)) continue;
			if(mb_strpos($line,'*/') !== false){
				$cmtPhase = false;
				continue;
			}
			if(mb_strpos($line,'/*') !== false){
				$cmtPhase = true;
				continue;
			}
			if($cmtPhase) continue;
			if(!$clsPhase){
				$str = $this->substr($line,'# ContainerName:');
				if(empty($str)) continue;
				$names = explode(',',$str);
				$bean = new ModelData($names[0],$names[1]);
				$clsPhase = true;
				continue;
			}

			// class phase
			$str = $this->substr($line,'primary key(',')');
			if(!empty($str)){
				$keys = explode(',',$str);
				foreach($keys as $pkey){
					$var = $bean->aColumns[$pkey]['var'];
					$bean->aPrimaryKeys[$var] = $pkey;
				}
				$this->aClasses_[$bean->sClass] = $bean;
				$clsPhase = false;
				continue;
			}
			// table
			$str = $this->substr($line,'create table','(');
			if(!empty($str)){
				$bean->sTable = $str;
				continue;
			}
			// column
			$col = $this->_getColumn($line);
			if($col == null){
				$msg = 'Invalid column. line='.$lineNum;
				throw new Exception(C_PR_ERR_EINVAL,$msg);
			}
			$bean->aColumns += $col;
		}
	}
}

class ModelData{
	public $sClass = null;
	public $sName = null;
	public $sTable = null;
	public $aColumns = array();
	public $aPrimaryKeys = array();

	public function __construct($rsClass,$rsName){
		$this->sClass = Misc::trim($rsClass);
		$this->sName = Misc::trim($rsName);
	}
}
?>
