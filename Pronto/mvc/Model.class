<?php
/* Copyright 2013 dodat */
/*---------------------------------------------------------------------------*
 * Abstract class - Model
 *      モデル基底クラス
 *---------------------------------------------------------------------------*/
namespace PR;

abstract class Model{

	// data type
	const DT_NUMERIC = 1;
	const DT_FLOAT = 2;
	const DT_ALPHABET = 3;
	const DT_ALPHANUMERIC = 4;
	const DT_TEXT = 5;
	const DT_PASSWORD = 6;
	const DT_URL = 7;
	const DT_EMAIL = 8;
	const DT_POSTCODE = 9;
	const DT_TEL = 10;
	const DT_DATE = 11;
	const DT_DOMAIN = 12;

	// get data type
	const TYPE_PRIMARY = 0;
	const TYPE_ALL = 1;
	const TYPE_DATA = 2;

	// index type of select data results
	const IDX_SERIAL = 0;
	const IDX_HIERARCHY = 1;
	const IDX_JOINKEY = 2;

	// kind of insert key
	const INS_NONE = 0;
	const INS_SERIAL = 1;
	const INS_UNIQUE = 2;

	protected $oDao = null;
	protected $oPager = null;
	protected $oSearcher = null;

	protected $aResults = null;
	protected $sIdxSep = '---';

	private $iIdxType_ = 0;
	private $aIndex_ = null;

	public function __construct($roDao=null){
		$this->oDao = $roDao;
		if($roDao == null) $this->oDao = DaoFactory::create();
	}

	public function setDao($roDao=null){
		$this->oDao = $roDao;
		if($roDao == null) $this->oDao = DaoFactory::create();
	}

	public function getPager(){
		return $this->oPager;
	}

	public function getSearcher(){
		return $this->oSearcher;
	}

	public function setPager($roPager){
		$this->oPager = $roPager;
	}

	public function setSearcher($roSearcher){
		$this->oSearcher = $roSearcher;
	}

	public function setIndex($riType,$raIndex=null){
		$this->iIdxType_ = $riType;
		$this->aIndex_ = $raIndex;
	}

/*---------------------------------------------------------------------------*
 * Public Methods
 *---------------------------------------------------------------------------*/
	public function getContainer($rsName){
		return $this->{'o'.$rsName};
	}

	public function getResults(){
		return $this->aResults;
	}

/*---------------------------------------------------------------------------*
 * Check Post Value
 *---------------------------------------------------------------------------*/
	protected function checkPost($rmVal,$riType,$rbAccEmpty=false){
		$rc = 0;
		if(empty($rmVal)){
			if($rbAccEmpty) return 0;
			return C_PR_ERR_ENOENT;
		}
		if($riType == self::DT_NUMERIC){
			if(!is_numeric($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_FLOAT){
			if(!is_float($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_ALPHABET){
			if(!HTTPUtil::isAlphabet($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_ALPHANUMERIC){
			if(!HTTPUtil::isAlphabet($rmVal,1)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_TEXT){
		}else if($riType == self::DT_PASSWORD){
		}else if($riType == self::DT_URL){
			if(!HTTPUtil::isURL($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_EMAIL){
			if(!HTTPUtil::isEMail($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_POSTCODE){
			if(!HTTPUtil::isPostCode($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_TEL){
			if(!HTTPUtil::isTel($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_DATE){
			if(!Misc::isDate($rmVal)) $rc = C_PR_ERR_EPARAM;
		}else if($riType == self::DT_DOMAIN){
			if(!HTTPUtil::isAlphabet($rmVal,2)){
				$rc = C_PR_ERR_EPARAM;
			}else{
				$chr = substr($rmVal,0,1);
				if(!HTTPUtil::isAlphabet($chr)) $rc = C_PR_ERR_EPARAM;
			}
		}
		return $rc;
	}

	protected function checkPasswd($rmVal,$riMinLen=0,$riMaxLen=0,$riKind=0){
		if(empty($rmVal)) return C_PR_ERR_ENOENT;
		$rc = HTTPUtil::isPassword($rmVal,$riMinLen,$riMaxLen,$riKind);
		return $rc;
	}

	protected function addPostErrorMsg($rsMsg,$rsSep,$rsVar,$riCode,$riMinLen=0,$riMaxLen=0,$riKind=0){
		$msg = $rsMsg;
		$err = $this->getPostErrorMsg($rsVar,$riCode,$riMinLen,$riMaxLen,$riKind);
		if(!empty($err)){
			$sp = $rsSep;
			if(empty($rsMsg)) $sp = '';
			$msg = $sp.$err;
		}
		return $msg;
	}

	protected function getPostErrorMsg($riCode,$rsName,$riType=0,$raCStrs=null){
		$msg = '';
		if($riType == self::DT_PASSWORD){
			$msg = SMSG('PR_E104',$rsName,SMSG('PR_D005'));
			if($riCode == C_PR_ERR_ENOENT){
				$msg = SMSG('PR_E103',$rsName);
			}else if($riCode == C_PR_ERR_EINVAL){
				$msg = SMSG('PR_E105',$rsName);
			}else if($riCode == C_PR_ERR_ESHORT){
				$msg = SMSG('PR_E106',$rsName,$raCStrs['min']);
			}else if($riCode == C_PR_ERR_EOVER){
				$msg = SMSG('PR_E107',$rsName,$raCStrs['max']);
			}else if($riCode == C_PR_ERR_EPARAM){
				$msg = SMSG('PR_E108',$rsName,$raCStrs['kind']);
			}
		}else if($riCode == C_PR_ERR_ENOENT){
			$msg = SMSG('PR_E103',$rsName);
		}else if($riCode == C_PR_ERR_EPARAM){
			$msg = SMSG('PR_E104',$rsName,'');
			if($riType == self::DT_NUMERIC){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D000'));
			}else if($riType == self::DT_FLOAT){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D001'));
			}else if($riType == self::DT_ALPHABET){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D002'));
			}else if($riType == self::DT_ALPHANUMERIC){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D003'));
			}else if($riType == self::DT_TEXT){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D004'));
			}else if($riType == self::DT_URL){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D006'));
			}else if($riType == self::DT_EMAIL){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D007'));
			}else if($riType == self::DT_POSTCODE){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D008'));
			}else if($riType == self::DT_TEL){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D009'));
			}else if($riType == self::DT_DATE){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D010'));
			}else if($riType == self::DT_DOMAIN){
				$msg = SMSG('PR_E104',$rsName,SMSG('PR_D011'));
			}
		}
		return $msg;
	}

/*---------------------------------------------------------------------------*
 * Dao select
 *---------------------------------------------------------------------------*/
	protected function has($rsTable,$raWheres=null,$rsToken=null){
		$aSels = array('*');
		$token = $rsToken;
		$token .= 'limit 0,1';
		$rc = $this->oDao->select($rsTable,$aSels,$raWheres,$token);
		if($rc == 0) $rc = $this->oDao->fetch();
		if($rc != 0) return $rc;
		$this->oDao->free();
		return true;
	}

	protected function num($rsTable,$raWheres=null,$rsToken=null){
		$aSels = array('count(*) as ccnt');
		$rc = $this->oDao->select($rsTable,$aSels,$raWheres,$rsToken);
		if($rc == 0) $rc = $this->oDao->fetch();
		if($rc != 0) return $rc;
		$num = $this->oDao->get('ccnt');
		$this->oDao->free();
		return $num;
	}

	protected function read($rsTable,$raWheres=null,$rsToken=null,$raSels=null){
		$aSels = $raSels;
		if(empty($aSels)) $aSels = array('*');
		$rc = $this->oDao->select($rsTable,$aSels,$raWheres,$rsToken);
		if($rc == 0) $rc = $this->oDao->fetch();
		if($rc != 0) return $rc;
		$record = $this->oDao->getAll();
		$this->oDao->free();
		$this->setResults($record,self::IDX_SERIAL);
		return 0;
	}

	protected function page($rsTable,$raWheres=null,$rsToken=null,$raSels=null){
		$rc = $this->lists($rsTable,$raWheres,$rsToken,$raSels,$this->iIdxType_,$this->aIndex_,$this->oPager,$this->oSearcher);
		return $rc;
	}

	protected function lists($rsTable,$raWheres=null,$rsToken=null,$raSels=null,$riType=self::IDX_SERIAL,$raIndex=null,$roPager=null,$roSearcher=null){
		if(($riType != self::IDX_SERIAL)&&(empty($raIndex))){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','raIndex is null.');
			return C_PR_ERR_EPARAM;
		}
		$aSels = $raSels;
		if(empty($aSels)) $aSels = array('*');
		$hasWheres = !empty($raWheres);
		$token = $rsToken;
		if(!empty($roPager)) $token = $this->addToken($token,$roPager->getSqlToken(),$hasWheres);
		if(!empty($roSearcher)) $token = $this->addToken($token,$roSearcher->getSqlToken(),$hasWheres);
		$rc = $this->oDao->select($rsTable,$aSels,$raWheres,$token);
		if($rc != 0) return $rc;

		$this->aResults = array();
		while($this->oDao->fetch() == 0){
			$record = $this->oDao->getAll();
			$this->setResults($record,$riType,$raIndex);
		}
		$this->oDao->free();
		return 0;
	}

	protected function query($rsSQL,$riIdxType=self::IDX_SERIAL,$raIndex=null,$roPager=null,$roSearcher=null){
		if(($riType != self::IDX_SERIAL)&&(empty($raIndex))){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','raIndex is null.');
			return C_PR_ERR_EPARAM;
		}
		$sql = $rsSQL;
		if(!empty($roPager)) $sql = $this->addToken($sql,$roPager->getSqlToken());
		if(!empty($roSearcher)) $sql = $this->addToken($sql,$roSearcher->getSqlToken());
		$rc = $this->oDao->query($sql);
		if($rc != 0) return $rc;

		$this->aResults = array();
		while($this->oDao->fetch() == 0){
			$record = $this->oDao->getAll();
			$this->setResults($record,$riType,$raIndex);
		}
		$this->oDao->free();
		return 0;
	}

	protected function addToken($rsToken,$rsAddToken,$rbHasWheres=false){
		if(empty($rsToken)) $rsToken = '';
		$rsToken = trim($rsToken);
		$rsAddToken = trim($rsAddToken);
		if(strpos($rsAddToken,'limit') === 0){
			$token = $rsToken.' '.$rsAddToken;
		}else{
			$token = '';
			if($rsToken == ''){
				$token = 'where '.$rsToken;
				if($rbHasWheres) $token = 'and '.$rsToken;
			}
			$strs1 = explode('group by',$token);
			$strs2 = explode('order by',$token);
			if(count($strs1) == 2){
				$token = $strs1[0].$rsAddToken.' '.$strs1[1];
			}else if(count($strs2) == 2){
				$token = $strs2[0].$rsAddToken.' '.$strs2[1];
			}else{
				$token .= $rsAddToken;
			}
		}
		return $token;
	}

	protected function setResults($raRecord,$riType,$raIndex=null){
		if(empty($raRecord)){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','raRecord is null.');
			return C_PR_ERR_EPARAM;
		}
		if($riType == self::IDX_SERIAL){
			$this->aResults[] = $raRecord;
		}else if($riType == self::IDX_HIERARCHY){ // $this->aList_["$var1"]["$var2"] = $roBean;
			$num = count($raIndex);
			if($num == 1){
				$key1 = $raRecord[$raIndex[0]];
				$this->aResults[$key1] = $raRecord;
			}else if($num == 2){
				$key1 = $raRecord[$raIndex[0]];
				$key2 = $raRecord[$raIndex[1]];
				$this->aResults[$key1][$key2] = $raRecord;
			}else if($num == 3){
				$key1 = $raRecord[$raIndex[0]];
				$key2 = $raRecord[$raIndex[1]];
				$key3 = $raRecord[$raIndex[2]];
				$this->aResults[$key1][$key2][$key3] = $raRecord;
			}
/*
			$pointer = &$this->aList_;
			foreach($raIndex as $var){
				if(!isset($pointer[$raRecord[$var])) $pointer[$raRecord[$var]] = array();
				$pointer = &$pointer[$raRecord[$var]];
			}
			$pointer = $raRecord;
*/
		}else if($riType == self::IDX_JOINKEY){ // $this->aList_["$var1---$var2"] = $roBean;
			$top = '';
			$sp = '';
			foreach($raIndex as $var){
				$top .= $sp.$raRecord[$var];
				$sp = $this->sIdxSep;
			}
			$this->aResults[$top] = $raRecord;
		}
	}

/*---------------------------------------------------------------------------*
 * Dao update
 *---------------------------------------------------------------------------*/
	protected function add($rsTable,$raSets,$raWheres,$raInsKey,$roLis=null){
		if(empty($raSets)){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','$raSets is null.');
		}
		$key = key($raInsKey);
		$kind = current($raInsKey);
		if(($kind != self::INS_NONE)&&(empty($raWheres))){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','$raWheres is null.');
		}
		$aIns = array_merge($raWheres,$raSets);
		if($kind == self::INS_NONE){
		}else if($kind == self::INS_SERIAL){
			if(isset($raWheres[$key])) unset($raWheres[$key]);
			$rc = $this->oDao->select($rsTable,array('max('.$key.') as cmax'),$raWheres);
			if($rc == 0) $rc = $this->oDao->fetch();
			if($rc != 0){
				$this->errorOccured(C_PR_ERR_EDBACS,'PR_E014','add1:rc='.$rc);
				return C_PR_ERR_EDBACS;
			}
			$max = $this->oDao->get('cmax');
			$this->oDao->free();
			$aIns[$key] = $max + 1;
		}else if($kind == self::INS_UNIQUE){
			$aIns[$key] = md5(uniqid(mt_rand(),true));
		}

		do{
			$loop = false;
			if(!empty($roLis)) $roLis->beforeAdd($aIns);
			$rc = $this->oDao->insert($rsTable,$aIns);
			if(($kind != self::INS_NONE)&&($rc == C_PR_ERR_EEXIST)){
				// Duplicate entry 'key' for key 'PRIMARY';
				$error = $this->oDao->getError();
				if(strpos($error,'PRIMARY') === false){
					$this->errorOccured(C_PR_ERR_EDBACS,'PR_E014','add2:');
					return C_PR_ERR_EDBACS;
				}
				if($kind == self::INS_SERIAL){
					$aIns[$key]++;
				}else{
					$aIns[$key] = md5(uniqid(mt_rand(),true));
				}
				$loop = true;
			}else if($rc != 0){
				$this->errorOccured(C_PR_ERR_EDBACS,'PR_E014','add3:rc='.$rc);
				return C_PR_ERR_EDBACS;
			}
		}while($loop);
		return 0;
	}

	protected function remove($rsTable,$raWheres,$rsToken=null){
		if(empty($raWheres)){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','$raWheres is null.');
			return C_PR_ERR_EPARAM;
		}
		$rc = $this->oDao->delete($rsTable,$raWheres,$rsToken);
		return $rc;
	}

	protected function update($rsTable,$raSets=null,$raWheres=null,$rsToken=null){
		if(empty($raSets)){
			$this->errorOccured(C_PR_ERR_EPARAM,'PR_E011','$raSets is null.');
			return C_PR_ERR_EPARAM;
		}
		$rc = $this->oDao->update($rsTable,$raSets,$raWheres,$rsToken);
		return $rc;
	}

/*---------------------------------------------------------------------------*
 * Protected Methods
 *---------------------------------------------------------------------------*/
	protected function errorOccured($riCode,$rsMsgId,$rsMessage){
		if($riCode == C_PR_ERR_EDBACS){
			$error = $this->oDao->getError();
			$sMessage .= ':'.$error;
		}
		$msg = SMSG($rsMsgId,$this->sMyName_.':'.$rsMessage);
		throw new Exception($riCode,$msg,true);
	}

/*---------------------------------------------------------------------------*
 * Private Methods
 *---------------------------------------------------------------------------*/
}
?>
